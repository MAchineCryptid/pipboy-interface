import pygame
import sys

# Initialize Pygame
pygame.init()

# Screen settings
WIDTH, HEIGHT = 800, 480  # Adjust for your HDMI LCD screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Raspberry Pi Pip-Boy")

# Colors
GREEN = (57, 255, 20)  # Classic Pip-Boy green
BLACK = (0, 0, 0)
HIGHLIGHT_COLOR = (85, 255, 60)  # Light green to highlight active tab
TAB_COLOR = (30, 180, 10)  # Darker green for inactive tabs
TAB_BORDER_COLOR = (80, 80, 80)  # Dark metallic color for tab borders

# Fonts
font = pygame.font.Font(None, 36)
small_font = pygame.font.Font(None, 24)

# Screen types (tabs)
MAIN_SCREEN = 0
GPS_SCREEN = 1
WIKI_SCREEN = 2
RADIO_SCREEN = 3

# Start on the main screen
current_screen = MAIN_SCREEN
previous_screen = MAIN_SCREEN

# Surface for the screen content
screen_content = pygame.Surface((WIDTH, HEIGHT))

# Define the tabs
tabs = ["Main", "GPS", "Wiki", "Radio"]

def draw_text(text, x, y, font_size=36, color=GREEN):
    font = pygame.font.Font(None, font_size)
    rendered_text = font.render(text, True, color)
    screen_content.blit(rendered_text, (x, y))

def draw_tabs():
    tab_width = WIDTH // len(tabs)  # Divide screen width into equal parts for each tab
    for i, tab in enumerate(tabs):
        # Tab size and position with rounded corners for 3D look
        tab_rect = pygame.Rect(i * tab_width, 0, tab_width, 40)  # Tab rectangle position and size
        tab_border_rect = pygame.Rect(i * tab_width + 2, 2, tab_width - 4, 36)  # Smaller rectangle for border effect

        # Draw the tab border (3D effect)
        pygame.draw.rect(screen, TAB_BORDER_COLOR, tab_border_rect, border_radius=10)  # Draw tab border
        if i == current_screen:
            pygame.draw.rect(screen, HIGHLIGHT_COLOR, tab_rect)  # Highlight active tab with light green
        else:
            pygame.draw.rect(screen, TAB_COLOR, tab_rect)  # Draw inactive tab in dark green
        
        # Draw the tab text in the center of the tab
        draw_text(tab, i * tab_width + (tab_width // 4), 10, font_size=24, color=BLACK if i != current_screen else GREEN)

def fade_in():
    for alpha in range(0, 255, 5):  # Gradually increase alpha
        overlay = pygame.Surface((WIDTH, HEIGHT))
        overlay.fill((0, 0, 0))
        overlay.set_alpha(alpha)
        screen.blit(overlay, (0, 0))
        pygame.display.flip()
        pygame.time.delay(1)  # Faster fade-in delay

def fade_out():
    for alpha in range(255, 0, -5):  # Gradually decrease alpha
        overlay = pygame.Surface((WIDTH, HEIGHT))
        overlay.fill((0, 0, 0))
        overlay.set_alpha(alpha)
        screen.blit(overlay, (0, 0))
        pygame.display.flip()
        pygame.time.delay(1)  # Faster fade-out delay

def draw_main_screen():
    screen_content.fill(BLACK)  # Clear the screen content surface
    draw_text("Raspberry Pi Pip-Boy", 250, 100, font_size=48)
    draw_text("System Status: Nominal", 250, 200, font_size=24)

def draw_gps_screen():
    screen_content.fill(BLACK)  # Clear the screen content surface
    draw_text("GPS: Searching...", 50, 20, font_size=24)
    draw_text("Status: Not Locked", 50, 60, font_size=24)

def draw_wiki_screen():
    screen_content.fill(BLACK)  # Clear the screen content surface
    draw_text("Offline Wiki: Ready", 50, 20, font_size=24)

def draw_radio_screen():
    screen_content.fill(BLACK)  # Clear the screen content surface
    draw_text("Radio: Scanning...", 50, 20, font_size=24)

def main():
    global current_screen, previous_screen
    clock = pygame.time.Clock()

    screens = [MAIN_SCREEN, GPS_SCREEN, WIKI_SCREEN, RADIO_SCREEN]
    while True:
        if current_screen != previous_screen:
            fade_out()  # Fade out to avoid flashing
            screen.fill(BLACK)  # Clear the screen to avoid previous content
            previous_screen = current_screen  # Update previous screen for comparison
            fade_in()  # Fade in the new screen

        # Draw the tab bar
        draw_tabs()

        # Draw the appropriate screen content below the tab bar
        if current_screen == MAIN_SCREEN:
            draw_main_screen()
        elif current_screen == GPS_SCREEN:
            draw_gps_screen()
        elif current_screen == WIKI_SCREEN:
            draw_wiki_screen()
        elif current_screen == RADIO_SCREEN:
            draw_radio_screen()

        screen.blit(screen_content, (0, 40))  # Blit the content surface below the tab bar
        pygame.display.flip()  # Update the display

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                # Move to the next screen (Tab key)
                if event.key == pygame.K_TAB and not pygame.key.get_pressed()[pygame.K_LSHIFT] and not pygame.key.get_pressed()[pygame.K_RSHIFT]:
                    current_screen = screens[(screens.index(current_screen) + 1) % len(screens)]
                # Move to the previous screen (Shift + Tab)
                elif event.key == pygame.K_TAB and (pygame.key.get_pressed()[pygame.K_LSHIFT] or pygame.key.get_pressed()[pygame.K_RSHIFT]):
                    current_screen = screens[(screens.index(current_screen) - 1) % len(screens)]

        clock.tick(30)  # Control the frame rate to avoid unnecessary updates

if __name__ == "__main__":
    main()
