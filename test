import pygame
import sys
import psutil
import datetime
import subprocess
import os

# Initialize Pygame
pygame.init()

# Screen settings
WIDTH, HEIGHT = 800, 480
BOTTOM_BORDER_HEIGHT = 30
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Raspberry Pi Pip-Boy")

# Create a surface for screen content
screen_content = pygame.Surface((WIDTH, HEIGHT - 40 - BOTTOM_BORDER_HEIGHT))

# Colors for Yellow Monochrome Theme
YELLOW = (255, 176, 0)  # Pip-Boy Amber
DARK_YELLOW = (139, 110, 20)  # Muted amber for inactive tabs
BLACK = (0, 0, 0)

# Apply new colors
TEXT_COLOR = YELLOW
ACTIVE_TAB_COLOR = YELLOW
INACTIVE_TAB_COLOR = BLACK  # Background color stays black
ACTIVE_TEXT_COLOR = BLACK  # Black text for contrast
BOTTOM_BORDER_COLOR = BLACK

# Fonts
font = pygame.font.Font(None, 36)
small_font = pygame.font.Font(None, 24)

# Screen types (tabs)
STATUS_SCREEN = 0
WIKI_SCREEN = 1
GPS_SCREEN = 2
RADIO_SCREEN = 3

# Start on the STATUS screen
current_screen = STATUS_SCREEN

# Define the tabs
tabs = ["STATUS", "WIKI", "GPS", "RADIO"]

# Load the background image for STATUS screen
bg_image = pygame.image.load("status_bg.png")  # Update with your image path

# Function to apply yellow filter to the image
def apply_yellow_filter(image):
    """ Apply a yellow filter to the background image. """
    yellow_image = image.copy()
    width, height = yellow_image.get_size()
    for x in range(width):
        for y in range(height):
            r, g, b, a = yellow_image.get_at((x, y))
            # Apply yellow tint by boosting red and green, maintaining blue as low
            yellow_image.set_at((x, y), (min(r + 50, 255), min(g + 100, 255), b, a))
    return yellow_image

# Apply the filter to the background image
bg_image = apply_yellow_filter(bg_image)

def get_cpu_usage():
    return f"CPU: {psutil.cpu_percent()}%"

def get_storage_space():
    disk = psutil.disk_usage("/")
    return f"Storage Available: {disk.free // (1024**3)} GB"

def get_power_status():
    """ Check if the device is on battery or plugged in. """
    power_path = "/sys/class/power_supply/AC/online"

    if os.path.exists(power_path):
        try:
            with open(power_path, "r") as f:
                power_state = f.read().strip()
                if power_state == "1":  # Plugged in
                    power_draw = round(psutil.cpu_percent() * 0.1, 2)  # Simulated power draw
                    return f"Power Draw: {power_draw}W"
                else:  # On battery
                    battery_path = "/sys/class/power_supply/BAT0/capacity"
                    if os.path.exists(battery_path):
                        with open(battery_path, "r") as b:
                            battery_level = b.read().strip()
                            return f"Battery: {battery_level}%"
                    else:
                        return "Battery: N/A"
        except:
            return "Power: Unknown"
    return "Power: N/A"

def get_wifi_signal():
    try:
        result = subprocess.run(["iwconfig", "wlan0"], capture_output=True, text=True)
        if "Signal level=" in result.stdout:
            signal_level = result.stdout.split("Signal level=")[1].split(" ")[0]
            return f"Wi-Fi: {signal_level} dBm"
        else:
            return "Wi-Fi: No Signal"
    except:
        return "Wi-Fi: N/A"

def get_datetime():
    now = datetime.datetime.now()
    return now.strftime("%m-%d-%Y %H:%M:%S")  # MM-DD-YYYY HH:MM:SS format

def draw_text(text, x, y, font_size=36, color=YELLOW):
    font = pygame.font.Font(None, font_size)
    rendered_text = font.render(text, True, color)
    screen_content.blit(rendered_text, (x, y))

def draw_tabs():
    tab_width = WIDTH // len(tabs)
    for i, tab in enumerate(tabs):
        tab_rect = pygame.Rect(i * tab_width, 0, tab_width, 40)
        pygame.draw.rect(screen, ACTIVE_TAB_COLOR if i == current_screen else INACTIVE_TAB_COLOR, tab_rect)
        text_color = ACTIVE_TEXT_COLOR if i == current_screen else YELLOW
        text_surface = small_font.render(tab, True, text_color)
        text_rect = text_surface.get_rect(center=(i * tab_width + tab_width // 2, 20))
        screen.blit(text_surface, text_rect)

def draw_bottom_border():
    pygame.draw.rect(screen, BOTTOM_BORDER_COLOR, (0, HEIGHT - BOTTOM_BORDER_HEIGHT, WIDTH, BOTTOM_BORDER_HEIGHT))
    datetime_text = small_font.render(get_datetime(), True, YELLOW)
    screen.blit(datetime_text, (WIDTH - 180, HEIGHT - BOTTOM_BORDER_HEIGHT + 5))

def draw_status_screen():
    screen_content.fill(BLACK)
    # Draw the background image first (behind the text)
    screen_content.blit(bg_image, (0, 0))  # Position the background image in the top-left
    draw_text("SYSTEM STATUS", 280, 60, font_size=48)
    draw_text(get_cpu_usage(), 50, 150, font_size=30)
    draw_text(get_storage_space(), 50, 190, font_size=30)  # Storage space info
    draw_text(get_power_status(), 50, 230, font_size=30)  # Battery % or Power Draw
    draw_text(get_wifi_signal(), 50, 270, font_size=30)

def draw_gps_screen():
    screen_content.fill(BLACK)
    draw_text("GPS: Searching...", 50, 20, font_size=24)
    draw_text("Status: Not Locked", 50, 60, font_size=24)

def draw_wiki_screen():
    screen_content.fill(BLACK)
    draw_text("Offline Wiki: Ready", 50, 20, font_size=24)

def draw_radio_screen():
    screen_content.fill(BLACK)
    draw_text("Radio: Scanning...", 50, 20, font_size=24)

def main():
    global current_screen
    clock = pygame.time.Clock()
    screens = [STATUS_SCREEN, WIKI_SCREEN, GPS_SCREEN, RADIO_SCREEN]
    
    while True:
        screen.fill(BLACK)  
        draw_tabs()

        screen_content.fill(BLACK)  
        if current_screen == STATUS_SCREEN:
            draw_status_screen()
        elif current_screen == WIKI_SCREEN:
            draw_wiki_screen()
        elif current_screen == GPS_SCREEN:
            draw_gps_screen()
        elif current_screen == RADIO_SCREEN:
            draw_radio_screen()

        screen.blit(screen_content, (0, 40))
        draw_bottom_border()  # Draw the bottom border with date & time
        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_TAB:
                    shift_pressed = pygame.key.get_pressed()[pygame.K_LSHIFT] or pygame.key.get_pressed()[pygame.K_RSHIFT]
                    if shift_pressed:
                        current_screen = screens[(screens.index(current_screen) - 1) % len(screens)]
                    else:
                        current_screen = screens[(screens.index(current_screen) + 1) % len(screens)]

        clock.tick(30)

if __name__ == "__main__":
    main()
